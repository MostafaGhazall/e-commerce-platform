generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  address    String?
  birthday   DateTime?
  city       String?
  country    String?
  firstName  String?
  gender     String?
  lastName   String?
  phone      String?
  postalcode String?
  region     String?
  cart       Cart?
  orders     Order[]
  wishlist   Wishlist?
  tokenVersion  Int      @default(0)
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  category      String
  rating        Float          @default(0)
  sizes         String[]
  stock         Int
  slug          String         @unique
  createdAt     DateTime       @default(now())       
  updatedAt     DateTime       @updatedAt @default(now())           
  cartItems     CartItem[]
  colors        Color[]
  images        Image[]
  OrderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
}

model Image {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ColorImage {
  id        String   @id @default(cuid())
  url       String
  colorId   String
  color     Color    @relation(fields: [colorId], references: [id])
}

model Color {
  id        String   @id @default(cuid())
  name      String
  value     String
  images    ColorImage[]
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  comment   String
  name      String
  rating    Int
  date      DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  size      String?
  color     String?
  colorName String?
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, size, color])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])

  @@unique([wishlistId, productId])
}

model Order {
  id            String      @id @default(cuid())
  userId        String?
  createdAt     DateTime    @default(now())
  total         Float
  status        String      @default("pending")
  paymentMethod String
  address       String
  city          String
  country       String
  email         String
  name          String
  phone         String
  postalcode    String
  region        String
  user          User?        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String?
  color     String?
  colorName String?
  imageUrl  String?
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
